{
	"info": {
		"_postman_id": "34d3c11f-9ed4-4b8e-bf5d-31e3a599aa3b",
		"name": "Interview Challenge",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "17877358",
		"_collection_link": "https://aryansteam.postman.co/workspace/Tier~f3fb1b11-e4f5-41c3-9a24-244e20e455b5/collection/17877358-34d3c11f-9ed4-4b8e-bf5d-31e3a599aa3b?action=share&source=collection_link&creator=17877358"
	},
	"item": [
		{
			"name": "Health Check",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"The 'cache_is_alive' field is present and has a boolean value\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.cache_is_alive).to.exist.and.to.be.a('boolean');",
							"});",
							"",
							"",
							"pm.test(\"Validate db_is_alive field\", function () {",
							"  const responseData = pm.response.json();",
							"",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.db_is_alive).to.exist.and.to.be.a('boolean');",
							"});",
							"",
							"",
							"pm.test(\"Validate the presence and non-empty string value of 'reporting_time'\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.reporting_time).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 500ms\", function () {",
							"  pm.expect(pm.response.responseTime).to.be.below(500);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:1234/health-check",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "1234",
					"path": [
						"health-check"
					]
				}
			},
			"response": []
		},
		{
			"name": "Shorten URL",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Response status code is 200', function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"})",
							"",
							"pm.test('Response should have the required field - url', function () {",
							"    const responseData = pm.response.json();",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.url).to.exist.and.to.be.a('string');",
							"})",
							"",
							"pm.test('URL should be a non-empty string', function () {",
							"    const responseData = pm.response.json();",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.url).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, 'URL should not be empty');",
							"})",
							"",
							"pm.test('Response time is less than 500ms', function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(500);",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"url\" : \"https://new.cdomkk/hello?123asdpq3\"\n}"
				},
				"url": {
					"raw": "http://localhost:1234/shorten",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "1234",
					"path": [
						"shorten"
					]
				}
			},
			"response": []
		},
		{
			"name": "Visit",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 404\", function () {",
							"  pm.response.to.have.status(404);",
							"});",
							"",
							"",
							"pm.test(\"Response has a non-empty message field\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.message).to.exist.and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 500ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(500);",
							"});",
							"",
							"",
							"pm.test(\"Verify that the response does not have any additional fields\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(Object.keys(responseData)).to.have.lengthOf(1, \"Response should only have one field\");",
							"});",
							"",
							"",
							"pm.test(\"Validate the response format\", function () {",
							"    pm.expect(pm.response.code).to.equal(404);",
							"    pm.expect(pm.response.json()).to.be.an('object');",
							"    pm.expect(pm.response.json().message).to.exist.and.to.be.a('string');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:1234/visit",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "1234",
					"path": [
						"visit"
					]
				}
			},
			"response": []
		}
	]
}